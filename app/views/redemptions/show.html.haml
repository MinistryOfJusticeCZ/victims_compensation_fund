= egov_breadcrumbs do |breadcrumbs|
  - breadcrumbs << link_to( @redemption.claim.file_uid, @redemption.claim )
  - breadcrumbs << link_to( Debt.model_name.human(count: :other), @redemption.claim )
  - breadcrumbs << link_to( @redemption.debt.offender.person.fullname, @redemption.debt )
  - breadcrumbs << link_to( Redemption.model_name.human(count: :other), @debt )
  - breadcrumbs << @redemption.payment.payment_uid

- formatter = attribute_formatter_for(schema = RedemptionSchema.new)
.attribute
  .label= Claim.model_name.human
  .value= link_to(@redemption.claim.file_uid, @redemption.claim)
.attribute
  .label= Debt.model_name.human
  .value= link_to(@redemption.debt.offender.person.fullname, @redemption.debt)
- if @redemption.debt.offender.person.natural?
  = formatter.labeled_html_attribute_value(schema.attribute('debt-offender-person-natural_person-birth_date'), @redemption)
.attribute
  .label= Payment.human_attribute_name('value')
  .value
    = Money.from_amount(schema.attribute('payment-value').value(@redemption), @redemption.payment.currency_code.upcase).format
    = ' ( z '
    = Money.from_amount(schema.attribute('debt-value').value(@redemption), 'CZK').format
    = ' )'
= formatter.labeled_html_attribute_value(schema.attribute('payment-status'), @redemption)
= formatter.labeled_html_attribute_value(schema.attribute('payment-paid_at'), @redemption)
= formatter.labeled_html_attribute_value(schema.attribute('author-fullname'), @redemption)

- if can?(:create, Satisfaction) && can?(:create, StateBudgetItem) && @redemption.paid? && @redemption.unprocessed?
  - if @redemption.debt.unsatisfied_appeals.any?
    - @redemption.debt.appeals.preload(:victim).each do |appeal|
      - next if appeal.satisfied?
      = buton_to_satisfaction_transfer_redemption(appeal, @redemption)
  - else
    = bootstrap_form_for([@redemption.debt, @redemption.debt.state_budget_items.build(fund_transfers_attributes: {'0' => {redemption_id: @redemption.id, value: @redemption.unprocessed_amount}})]) do |f|
      = f.fields_for(:fund_transfers) do |fields|
        = fields.hidden_field(:redemption_id)
        = fields.hidden_field(:value)
      = f.submit

.audits{ style: 'font-size: 85%;' }
  - audit_formatter = attribute_formatter_for(@audit_schema)
  - payment_formatter = attribute_formatter_for(payment_schema = PaymentSchema.new)
  %h5= Audited::Audit.model_name.human(count: :other)
  %table.table
    %thead
      %th= Audited::Audit.human_attribute_name('created_at')
      %th= Audited::Audit.human_attribute_name('audited_changes')
      %th= Audited::Audit.human_attribute_name('comment')
    %tbody
      - @audit_schema.entities.reorder(version: :desc).each do |audit|
        - changes = audit.audited_changes.select { |n, ch| !ch.nil? && !%w(direction currency_code).include?(n) }
        - next unless changes.any?
        %tr
          %td= audit_formatter.html_formatted_value(@audit_schema.attribute('created_at'), audit)
          %td
            - changes.each do |name, change|
              .change
                %b= payment_formatter.attribute_html_label(payment_schema.attribute(name)) + ': '
                - if audit.action == 'create'
                  = payment_formatter.human_value(payment_schema.attribute(name), change)
                - elsif audit.action == 'update'
                  = payment_formatter.human_value(payment_schema.attribute(name), change.first)
                  = ' -> '
                  = payment_formatter.human_value(payment_schema.attribute(name), change.second)
          %td= audit_formatter.html_formatted_value(@audit_schema.attribute('comment'), audit)
